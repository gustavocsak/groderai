# Assignment Analysis Instructions

## Coding Assignment Instructions
[You will paste the specific method prototypes and method requirements here]

## General Assignment Requirements
- Provide details about:
  * Allowed/disallowed methods/classes
  * Documentation format expectations
  * Any specific coding constraints
  * Naming conventions
  * Any other relevant project guidelines

## Code Analysis Requirements
Act as a coding assistant tool.
Please thoroughly review the submitted Java code and provide a comprehensive analysis report
make sure to state every part found that does not comply with the assignment instructions.
covering the following aspects, follow this template given:

1. Code Readability
   - Overall code structure
   - Logical organization
   - Clarity of implementation

2. Documentation
   - Completeness of method/class comments
   - Adherence to specified documentation format
   - Clarity and informativeness of existing documentation

3. Formatting and Style
   - Indentation consistency
   - Proper use of whitespace
   - Line length and code layout

4. Naming Conventions
   - Class naming
   - Method naming
   - Variable naming
   - Constant naming
   - Adherence to Java naming standards

5. Syntax and Compilation
   - Identification of any syntax errors
   - Potential compilation issues
   - Correctness of method signatures

6. Algorithmic Analysis
   - Time complexity of implemented methods
   - Space complexity considerations
   - Efficiency of algorithmic approach

7. Prototype Matching
   - Verification that all required methods are implemented
   - Compliance with specified method prototypes
   - Correct parameter and return types

## Reporting Guidelines
- Be concise but comprehensive
- Do not omit any significant findings
- Organize findings by category for clarity

[Paste Java Code Here]








## Prompt for Code Review and Analysis
Act as a coding assistant tool, analyze the code given according to the assignment instructions, give all the information required, do not omit any finding.

**Input:**

1. **Coding Assignment Instructions:**

2. **Java Code:**  The student's implementation of the methods.


**Output:**

A concise and structured report analyzing the Java code against the provided assignment instructions
Follow this template, be concise and separate your report into these parts:
This is very important: be extremely specific, do not mention: "some parts, some methods..." be specific.
You must be concise in your findings, be clear and direct if you are to report something, this should be a report that is easy to read.

* **Documentation:** Evaluate the completeness and correctness of the Javadoc/comment documentation against the requested format and requirements.  Specify any missing documentation or inaccuracies.
* **Indentation/Formatting:**  Evaluate adherence to the specified indentation and formatting guidelines.  Point out any significant formatting issues.
* **Variable/Class Naming:**  Check against the specified naming conventions.  Mention any issues, like using poor variable names, not following camelCase/PascalCase, etc.
* **Syntax Errors:**  Identify and report any syntax errors or compilation issues.  Specify the line number where errors occur.
* **Matching Method Prototypes:**  Verify that the implemented methods match the prototypes declared in the assignment instructions in terms of parameters, return types, and access modifiers.  Highlight any discrepancies.
* **Correct Method Implementation:** Verify that all methods are correctly implemented and if all methods solve the problem given in instructions correctly, point out any incorrectness.
Analyze the time and space complexity of the implemented methods if it is relevant to the problem statement.
* **Allowed Classes/Methods:** Check if the student does not violate any requirement stated in the assignment instructions, like the use of not allowed external methods.
