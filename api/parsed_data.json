{
    "metadata": {
        "description": "This program reads a text file word by word, saves it in an array of Strings, processes the words, sorts the words in alphabetical order, keeps only one instance of each word and saves them in sorted order in another file. Additionally, the program will print number of the words, and frequency of each letter ('a' to 'z'), ignoring cases.",
        "language": "Java",
        "requirements": [
            "No Syntax Errors",
            "No Runtime Errors",
            "Program must contains at least 5 methods",
            "The program cannot take too long to run or run infinite loop at some points",
            "Prompt the user for input and output file names",
            "Create the output to save the sorted words. DO NOT overwrite the original input file.",
            "Change all words to lower case",
            "You have to count number of matching words before you declare the size of the array",
            "If words have a punctuation symbol at the beginning or at the end of the words then remove the punctuation marks from both sides of the word, keep the word.",
            "If words still have any symbol except '-' and letter, then ignore the word",
            "Ignore the words that contain digits",
            "Remove spaces from both sides of the words",
            "Save the words in a file",
            "Sort the words in alphabetical order",
            "Save only one instance of each word, if there are many occurrences of the same word",
            "The input file (unsorted.txt) is used to test your program. If the output misses/contains too many/few words, it will be considered as bugs.",
            "You are not allowed to use Java sort methods",
            "Do not overwrite the original input file",
            "The program should create an output file if the output does not exist.",
            "Print number of the words, and frequency of each letter ('a' to 'z'), ignore cases",
            "DO NOT use ArrayList",
            "DO NOT declare a string array with fixed number of elements.",
            "Take too much time to run the program",
            "header information at the top of the program [include your name, class section and program description]",
            "Use Javadoc comment style and comment your class",
            "- describe the parameter(s) required for each method",
            "- describe the return value (or output) for each method",
            "- describe the purpose of the program",
            "- Comment should be placed on the top of the method",
            "indentation & alignment",
            "Do not use any magic numbers and please use variables for any calculations."
        ],
        "title": "Lab10"
    },
    "students": [
        {
            "code_analysis": {
                "documentation": [
                    "The code includes Javadoc comments for the class and methods, describing parameters, return values, and purpose.",
                    "Comments are placed at the top of methods."
                ],
                "linting_errors": [],
                "missing_requirements": [],
                "readability": [
                    "The code is well-indented and aligned, making it easy to read.",
                    "Variables are used for calculations, avoiding magic numbers."
                ],
                "restricted_usage": [
                    "The code does not use ArrayList or Java sort methods as restricted.",
                    "The code dynamically allocates the size of String array."
                ]
            },
            "filename": "crashbandicoot.java",
            "methods": [
                {
                    "errors": [],
                    "expected_prototype": "public static void main(String[] args) throws FileNotFoundException",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static void main(String[] args) throws FileNotFoundException",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static int countWords(File file) throws FileNotFoundException",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static int countWords(File file) throws FileNotFoundException",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static String[] getWordsFromFile(File file, int size) throws FileNotFoundException",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static String[] getWordsFromFile(File file, int size) throws FileNotFoundException",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static void printWordCountAndLetterFrequency(String[] words)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static void printWordCountAndLetterFrequency(String[] words)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static int[] getLetterFrequency(String[] words)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static int[] getLetterFrequency(String[] words)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static void cleanWords(String[] words)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static void cleanWords(String[] words)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static String trimNonLetters(String word)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static String trimNonLetters(String word)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static boolean isInvalidWord(String word)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static boolean isInvalidWord(String word)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static String[] removeEmptyStrings(String[] arr)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static String[] removeEmptyStrings(String[] arr)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static int countNonEmptyStrings(String[] arr)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static int countNonEmptyStrings(String[] arr)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static void sortArray(String[] arr)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static void sortArray(String[] arr)",
                    "time_complexity": "O(n^2)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static String[] getUniqueWords(String[] arr)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static String[] getUniqueWords(String[] arr)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static int countUniqueWords(String[] arr)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static int countUniqueWords(String[] arr)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static void writeToFile(String[] words, File outputFile) throws FileNotFoundException",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static void writeToFile(String[] words, File outputFile) throws FileNotFoundException",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static boolean isALetter(char character)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static boolean isALetter(char character)",
                    "time_complexity": "O(1)"
                }
            ],
            "name": "Crash Bandicoot",
            "summary": [
                "The student's code fulfills all requirements. The code has no syntax errors, no runtime errors, contains more than 5 methods, does not take too long to run, and prompts the user for file names.",
                "The code successfully processes words from the input file, handles words with punctuation, ignores non-letter words, and saves unique sorted words to the output file, along with printing the total number of words and letter frequencies.",
                "The code adheres to all restrictions, avoiding the use of ArrayList, and correctly declaring the array size after counting words.",
                "The program follows the correct documentation style."
            ]
        },
        {
            "code_analysis": {
                "documentation": [
                    "The code includes comments, although they lack the detailed Javadoc-style documentation that was asked for the methods"
                ],
                "linting_errors": [],
                "missing_requirements": [],
                "readability": [
                    "The code is generally readable, with consistent indentation and formatting.",
                    "Variables are used for calculations, avoiding magic numbers."
                ],
                "restricted_usage": [
                    "The code does not use ArrayList and does not use java sort methods, as specified.",
                    "The code dynamically allocates the size of String array."
                ]
            },
            "filename": "sonichedgehog.java",
            "methods": [
                {
                    "errors": [],
                    "expected_prototype": "public static void main(String[] args) throws FileNotFoundException",
                    "is_correct": true,
                    "is_documented": false,
                    "prototype": "public static void main(String[] args) throws FileNotFoundException",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static String[] filterWords(String[] words)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static String[] filterWords(String[] words)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static boolean isLetter(char c)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static boolean isLetter(char c)",
                    "time_complexity": "O(1)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static String[] wordSorter(String[] words)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static String[] wordSorter(String[] words)",
                    "time_complexity": "O(n^2)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static String[] removeDuplicates(String[] words)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static String[] removeDuplicates(String[] words)",
                    "time_complexity": "O(n^2)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static void saveToFile(String[] words, String fileName) throws FileNotFoundException",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static void saveToFile(String[] words, String fileName) throws FileNotFoundException",
                    "time_complexity": "O(n)"
                }
            ],
            "name": "Sonic Hedgehog",
            "summary": [
                "The student's code meets the functional requirements. It handles file input/output, processes words by lowercasing, and filtering out invalid characters, sorting them alphabetically, removing duplicates, and writing to a file.",
                "The program correctly prompts the user for input and output file names, and the output file contains correctly processed words.",
                "The code also calculates the word count and letter frequency correctly",
                "However, it lacks the Javadoc-style comments that was asked for"
            ]
        },
        {
            "code_analysis": {
                "documentation": [
                    "The code has comments, but lacks detailed Javadoc style comments."
                ],
                "linting_errors": [],
                "missing_requirements": [
                    "The code uses regular expressions, but the instructions asked to iterate by characters"
                ],
                "readability": [
                    "The code is generally readable with good indentations."
                ],
                "restricted_usage": [
                    "The code does not use ArrayList as restricted.",
                    "The code dynamically allocates the size of String array."
                ]
            },
            "filename": "drybones.java",
            "methods": [
                {
                    "errors": [],
                    "expected_prototype": "public static void main(String[] args) throws IOException",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "public static void main(String[] args) throws IOException",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "private static int countWordsInFile(String fileName) throws IOException",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "private static int countWordsInFile(String fileName) throws IOException",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "private static void readWordsFromFile(String fileName, String[] words) throws IOException",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "private static void readWordsFromFile(String fileName, String[] words) throws IOException",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "private static void cleanWords(String[] words)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "private static void cleanWords(String[] words)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "private static void printLetterCount(String[] words)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "private static void printLetterCount(String[] words)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "private static void sortWords(String[] words)",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "private static void sortWords(String[] words)",
                    "time_complexity": "O(n^2)"
                },
                {
                    "errors": [],
                    "expected_prototype": "private static void saveUniqueWords(String[] words, String outputFileName) throws IOException",
                    "is_correct": true,
                    "is_documented": true,
                    "prototype": "private static void saveUniqueWords(String[] words, String outputFileName) throws IOException",
                    "time_complexity": "O(n)"
                }
            ],
            "name": "Dry Bones",
            "summary": [
                "The student's code meets all functional requirements. It handles file input/output, processes words by lowercasing, and filtering out invalid characters, sorting them alphabetically, removing duplicates, and writing to a file.",
                "The program prompts the user for input and output file names, and the output file contains correctly processed words.",
                "The code calculates word count and letter frequencies correctly",
                "However, the code uses regular expressions which was not asked, and lacks the Javadoc style comments that was asked for"
            ]
        },
        {
            "code_analysis": {
                "documentation": [
                    "The code has comments describing the methods, however, it lacks the detailed Javadoc style comments that was requested."
                ],
                "linting_errors": [],
                "missing_requirements": [
                    "The code uses ArrayList which was forbidden.",
                    "The code uses TreeSet which was not allowed since student was asked to implement their own sorting algorithm.",
                    "The code does not dynamically allocate the size of the array"
                ],
                "readability": [
                    "The code is generally readable."
                ],
                "restricted_usage": []
            },
            "filename": "spyrothedragon.java",
            "methods": [
                {
                    "errors": [],
                    "expected_prototype": "public static void main(String[] args)",
                    "is_correct": true,
                    "is_documented": false,
                    "prototype": "public static void main(String[] args)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static List<String> readAndProcessWords(Scanner input)",
                    "is_correct": true,
                    "is_documented": false,
                    "prototype": "public static List<String> readAndProcessWords(Scanner input)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static int[] countLetterFrequencies(List<String> words)",
                    "is_correct": true,
                    "is_documented": false,
                    "prototype": "public static int[] countLetterFrequencies(List<String> words)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static void printLetterFrequencies(int[] letterFrequency)",
                    "is_correct": true,
                    "is_documented": false,
                    "prototype": "public static void printLetterFrequencies(int[] letterFrequency)",
                    "time_complexity": "O(n)"
                },
                {
                    "errors": [],
                    "expected_prototype": "public static void saveWordsToFile(Set<String> words, String outputFileName)",
                    "is_correct": true,
                    "is_documented": false,
                    "prototype": "public static void saveWordsToFile(Set<String> words, String outputFileName)",
                    "time_complexity": "O(n)"
                }
            ],
            "name": "Spyro The Dragon",
            "summary": [
                "The student's code fulfills most functional requirements but violates some restrictions by using ArrayList and TreeSet. While the code processes words, removes duplicates, and saves them, it does not adhere to restrictions.",
                "The code does not count the number of words. The code does not dynamically allocate the size of the array",
                "The code lacks proper documentation using Javadoc style comments as requested."
            ]
        }
    ]
}